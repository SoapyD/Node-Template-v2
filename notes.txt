
-remove NULL moving and shooting elements so they don't tax the socket emit


actions
----------------------------

STATUS effects
-Pass effects back to movement path if a unit passed through them
-do the same for target and splash targets of bullets

SHOOTING
-DONE -Check barriers to see if they affect bullets
-DONE -apply effects for sniping units / effects when figuring out wounding
-DONE -apply damage reduction when shield barrier is crossed


MOVEMENT
-DONE -Cohesion checks
-DONE -Update positions of units

-Finalise movemement once it's completed
-Make the selected unit stand out in terms of cohesion brightness
-make the path line dissappear one the object is reached
-if a unit has a saved path on the server, use the end path for the selection position instead
-if a path is reset for a unit, waterfall any unit path resets that it affects.
-check to see if a unit is leaving combat and check and apply damage once it's finished moving

FIGHTING
-

RESET
-Add reset for moved, shot and fought

SPECIAL RULES
-DONE -whirling dervish - unit adds 4 to their melee armour piercing value the turn they move into combat
-DONE -sniper - unit adds 4 to their armour piercing value if they don't move before taking the shot
-DONE -firing drills - unit that doesn't move can double the number of shots from their ranged weapon

-regen - 20% chance of the unit regenerating any lost wounds suffered
-poison
    -Need to apply poison to units hit by it during shooting
    -Need to check for status, apply damage and tick down health of effect

-swift - unit can charge even if they've shot their weapon
-sword dance - unit can leave combat without suffering opportunity attacks from enemies
-barrage - you may fire a shot with a weapon indirectly
-berserker - unit can double the number of targets from their melee weapon the turn they move into combat



-modernize the login and register input fields




//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
######  ####### #     # ####### 
#     # #     # ##    # #       
#     # #     # # #   # #       
#     # #     # #  #  # #####   
#     # #     # #   # # #       
#     # #     # #    ## #       
######  ####### #     # ####### 
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

-DONE -Limit the range to the maximum range of a gun
-DONE -Keep a list of potential unit shooting targets that can be referred back to later

-DONE -save the potential targets to the gamedata table
-DONE -generate blast markers
-DONE -generate barrier
-DONE -generate wounding
-DONE -Figure out in the timeline exactly where a bullet will die

-Full Check
    -DONE -Generate target paths for all units
    -DONE -When all units are readied up
        -DONE -tick through bullets, deciding what order they'll hit in, and what wounding occurs
        -DONE -figure out if a unit is dead in this step phase so when the next bullet is figured out, it'll then carry past any "dead units"

-Smart Check
    -Maybe instead of stopping a bullet entirely when it's path is checked, all unit stops are logged
    -Then pass a set number of wounding scores that can then be applied to any unit it hits
    -There would need to be a way for the server to figure out who's actually hit though


-DONE -liveMessage alert is spawning for a second or two, causing a stutter
-DONE -Grey out the offscene menu when a room is succesfully join or created then close it after the message bar is removed

-DONE -use the game template setup and connect to the socket using a guest login
-DONE -Move the pathfinder script to the server and load the MAP JSON file
-DONE -Strip down the unit class to completely seperate out any functions that can be carried out on the server with those those must be on the client side
    -DONE -Sprite generation and movement, CLIENT
    -DONE -setting actions, SERVER
    -DONE -path checking to show available spaces, SERVER
-DONE -Tie the marker to an actual user ID instead of just the first one



-DONE -Create a means of generating a path on the server then passing back a series of positions and angles for the sprite to follow
-DONE -Control the game state on the Server now its been seperated from the GameUI class

-DONE -Position a unit then generate possible positions for them to move in the server
    -run a loop x number of times a second then cancel it when it's no longer needed
    -return all possible movement position
-DONE -When a possible position is clicked on
    -recognise the click
    -generate path to that position then send it to the client
    -draw the client path
    -set a timer on the server that calculates which marker the unit should be on over x seconds then send that position to the client to align the client
    -make the unit interpolate along the given path